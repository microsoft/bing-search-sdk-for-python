# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.0.6320, generator: {generator})
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse

from .. import models as _models

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, List, Optional, TypeVar, Union

    T = TypeVar("T")
    ClsType = Optional[
        Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]
    ]


class VideosOperations(object):
    """VideosOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~video_search_client.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = _models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def search(
        self,
        query,  # type: str
        x_bing_apis_sdk=True,  # type: Union[str, "_models.XBingApisSDK"]
        accept=None,  # type: Optional[str]
        accept_language=None,  # type: Optional[str]
        user_agent_parameter=None,  # type: Optional[str]
        client_id=None,  # type: Optional[str]
        client_ip=None,  # type: Optional[str]
        location=None,  # type: Optional[str]
        country_code=None,  # type: Optional[str]
        count=None,  # type: Optional[int]
        freshness=None,  # type: Optional[Union[str, "_models.Freshness"]]
        id=None,  # type: Optional[str]
        length=None,  # type: Optional[Union[str, "_models.VideoLength"]]
        market=None,  # type: Optional[str]
        offset=None,  # type: Optional[int]
        pricing=None,  # type: Optional[Union[str, "_models.VideoPricing"]]
        resolution=None,  # type: Optional[Union[str, "_models.VideoResolution"]]
        safe_search=None,  # type: Optional[Union[str, "_models.SafeSearch"]]
        set_lang=None,  # type: Optional[str]
        text_decorations=None,  # type: Optional[bool]
        text_format=None,  # type: Optional[Union[str, "_models.TextFormat"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "_models.Videos"
        """The Video Search API lets you send a search query to Bing and get back a list of videos that are relevant to the search query. This section provides technical details about the query parameters and headers that you use to request videos and the JSON response objects that contain them. For examples that show how to make requests, see `Searching the Web for Videos <https://docs.microsoft.com/en-us/bing/bing-video-search/overview>`_.

        The Video Search API lets you send a search query to Bing and get back a list of videos that
        are relevant to the search query. This section provides technical details about the query
        parameters and headers that you use to request videos and the JSON response objects that
        contain them. For examples that show how to make requests, see `Searching the Web for Videos
        <https://docs.microsoft.com/en-us/bing/bing-video-search/overview>`_.

        :param x_bing_apis_sdk: Activate swagger compliance.
        :type x_bing_apis_sdk: str or ~video_search_client.models.XBingApisSDK
        :param query: The user's search query string. The query string cannot be empty. The query
         string may contain `Bing Advanced Operators
         <http://msdn.microsoft.com/library/ff795620.aspx>`_. For example, to limit videos to a specific
         domain, use the `site: <http://msdn.microsoft.com/library/ff795613.aspx>`_ operator. Use this
         parameter only with the Video Search API. Do not specify this parameter when calling the
         Trending Videos API.
        :type query: str
        :param accept: The default media type is application/json. To specify that the response use
         `JSON-LD <http://json-ld.org/>`_\ , set the Accept header to application/ld+json.
        :type accept: str
        :param accept_language: A comma-delimited list of one or more languages to use for user
         interface strings. The list is in decreasing order of preference. For additional information,
         including expected format, see `RFC2616
         <http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html>`_. This header and the `setLang
         <https://docs.microsoft.com/en-us/bing/bing-video-search/overview>`_ query parameter are
         mutually exclusive; do not specify both. If you set this header, you must also specify the `cc
         <https://docs.microsoft.com/en-us/bing/bing-video-search/overview>`_ query parameter. To
         determine the market to return results for, Bing uses the first supported language it finds
         from the list and combines it with the cc parameter value. If the list does not include a
         supported language, Bing finds the closest language and market that supports the request or it
         uses an aggregated or default market for the results. To determine the market that Bing used,
         see the BingAPIs-Market header. Use this header and the cc query parameter only if you specify
         multiple languages. Otherwise, use the `mkt <https://docs.microsoft.com/en-us/bing/bing-video-
         search/overview>`_ and `setLang <https://docs.microsoft.com/en-us/bing/bing-video-
         search/overview>`_ query parameters. A user interface string is a string that's used as a label
         in a user interface. There are few user interface strings in the JSON response objects. Any
         links to Bing.com properties in the response objects apply the specified language.
        :type accept_language: str
        :param user_agent_parameter: The user agent originating the request. Bing uses the user agent
         to provide mobile users with an optimized experience. Although optional, you are encouraged to
         always specify this header. The user-agent should be the same string that any commonly used
         browser sends. For information about user agents, see `RFC 2616
         <http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html>`_. The following are examples of user-
         agent strings. Windows Phone: Mozilla/5.0 (compatible; MSIE 10.0; Windows Phone 8.0;
         Trident/6.0; IEMobile/10.0; ARM; Touch; NOKIA; Lumia 822). Android: Mozilla / 5.0 (Linux; U;
         Android 2.3.5; en - us; SCH - I500 Build / GINGERBREAD) AppleWebKit / 533.1 (KHTML; like Gecko)
         Version / 4.0 Mobile Safari / 533.1. iPhone: Mozilla / 5.0 (iPhone; CPU iPhone OS 6_1 like Mac
         OS X) AppleWebKit / 536.26 (KHTML; like Gecko) Mobile / 10B142 iPhone4; 1 BingWeb /
         3.03.1428.20120423. PC: Mozilla / 5.0 (Windows NT 6.3; WOW64; Trident / 7.0; Touch; rv:11.0)
         like Gecko. iPad: Mozilla / 5.0 (iPad; CPU OS 7_0 like Mac OS X) AppleWebKit / 537.51.1 (KHTML,
         like Gecko) Version / 7.0 Mobile / 11A465 Safari / 9537.53.
        :type user_agent_parameter: str
        :param client_id: Bing uses this header to provide users with consistent behavior across Bing
         API calls. Bing often flights new features and improvements, and it uses the client ID as a key
         for assigning traffic on different flights. If you do not use the same client ID for a user
         across multiple requests, then Bing may assign the user to multiple conflicting flights. Being
         assigned to multiple conflicting flights can lead to an inconsistent user experience. For
         example, if the second request has a different flight assignment than the first, the experience
         may be unexpected. Also, Bing can use the client ID to tailor web results to that client IDâ€™s
         search history, providing a richer experience for the user. Bing also uses this header to help
         improve result rankings by analyzing the activity generated by a client ID. The relevance
         improvements help with better quality of results delivered by Bing APIs and in turn enables
         higher click-through rates for the API consumer. IMPORTANT: Although optional, you should
         consider this header required. Persisting the client ID across multiple requests for the same
         end user and device combination enables 1) the API consumer to receive a consistent user
         experience, and 2) higher click-through rates via better quality of results from the Bing APIs.
         Each user that uses your application on the device must have a unique, Bing generated client
         ID. If you do not include this header in the request, Bing generates an ID and returns it in
         the X-MSEdge-ClientID response header. The only time that you should NOT include this header in
         a request is the first time the user uses your app on that device. Use the client ID for each
         Bing API request that your app makes for this user on the device. Persist the client ID. To
         persist the ID in a browser app, use a persistent HTTP cookie to ensure the ID is used across
         all sessions. Do not use a session cookie. For other apps such as mobile apps, use the device's
         persistent storage to persist the ID. The next time the user uses your app on that device, get
         the client ID that you persisted. Bing responses may or may not include this header. If the
         response includes this header, capture the client ID and use it for all subsequent Bing
         requests for the user on that device. If you include the X-MSEdge-ClientID, you must not
         include cookies in the request.
        :type client_id: str
        :param client_ip: The IPv4 or IPv6 address of the client device. The IP address is used to
         discover the user's location. Bing uses the location information to determine safe search
         behavior. Although optional, you are encouraged to always specify this header and the X-Search-
         Location header. Do not obfuscate the address (for example, by changing the last octet to 0).
         Obfuscating the address results in the location not being anywhere near the device's actual
         location, which may result in Bing serving erroneous results.
        :type client_ip: str
        :param location: A semicolon-delimited list of key/value pairs that describe the client's
         geographical location. Bing uses the location information to determine safe search behavior and
         to return relevant local content. Specify the key/value pair as :code:`<key>`::code:`<value>`.
         The following are the keys that you use to specify the user's location. lat (required): The
         latitude of the client's location, in degrees. The latitude must be greater than or equal to
         -90.0 and less than or equal to +90.0. Negative values indicate southern latitudes and positive
         values indicate northern latitudes. long (required): The longitude of the client's location, in
         degrees. The longitude must be greater than or equal to -180.0 and less than or equal to
         +180.0. Negative values indicate western longitudes and positive values indicate eastern
         longitudes. re (required): The radius, in meters, which specifies the horizontal accuracy of
         the coordinates. Pass the value returned by the device's location service. Typical values might
         be 22m for GPS/Wi-Fi, 380m for cell tower triangulation, and 18,000m for reverse IP lookup. ts
         (optional): The UTC UNIX timestamp of when the client was at the location. (The UNIX timestamp
         is the number of seconds since January 1, 1970.) head (optional): The client's relative heading
         or direction of travel. Specify the direction of travel as degrees from 0 through 360, counting
         clockwise relative to true north. Specify this key only if the sp key is nonzero. sp
         (optional): The horizontal velocity (speed), in meters per second, that the client device is
         traveling. alt (optional): The altitude of the client device, in meters. are (optional): The
         radius, in meters, that specifies the vertical accuracy of the coordinates. Specify this key
         only if you specify the alt key. Although many of the keys are optional, the more information
         that you provide, the more accurate the location results are. Although optional, you are
         encouraged to always specify the user's geographical location. Providing the location is
         especially important if the client's IP address does not accurately reflect the user's physical
         location (for example, if the client uses VPN). For optimal results, you should include this
         header and the X-MSEdge-ClientIP header, but at a minimum, you should include this header.
        :type location: str
        :param country_code: A 2-character country code of the country where the results come from.
         This API supports only the United States market. If you specify this query parameter, it must
         be set to us. If you set this parameter, you must also specify the Accept-Language header. Bing
         uses the first supported language it finds from the languages list, and combine that language
         with the country code that you specify to determine the market to return results for. If the
         languages list does not include a supported language, Bing finds the closest language and
         market that supports the request, or it may use an aggregated or default market for the results
         instead of a specified one. You should use this query parameter and the Accept-Language query
         parameter only if you specify multiple languages; otherwise, you should use the mkt and setLang
         query parameters. This parameter and the mkt query parameter are mutually exclusiveâ€”do not
         specify both.
        :type country_code: str
        :param count: The number of videos to return in the response. The actual number delivered may
         be less than requested. The default is 35. The maximum is 105. You may use this parameter along
         with the offset parameter to page results. For example, if your user interface presents 20
         videos per page, set count to 20 and offset to 0 to get the first page of results. For each
         subsequent page, increment offset by 20 (for example, 0, 20, 40). Use this parameter only with
         the Video Search API. Do not specify this parameter when calling the Trending Videos API or the
         Web Search API.
        :type count: int
        :param freshness: Filter videos by the date and time that Bing discovered the video. The
         following are the possible filter values. Day: Return videos discovered within the last 24
         hours. Week: Return videos discovered within the last 7 days. Month: Return videos discovered
         within the last 30 days.
        :type freshness: str or ~video_search_client.models.Freshness
        :param id: An ID that uniquely identifies a video. The `Video <https://docs.microsoft.com/en-
         us/bing/bing-video-search/overview>`_ object's videoId field contains the ID that you set this
         parameter to. You use this parameter to ensure that the specified video is the first video in
         the list of videos that Bing returns.
        :type id: str
        :param length: Filter videos by the following lengths: Short: Return videos that are less than
         5 minutes. Medium: Return videos that are between 5 and 20 minutes, inclusive. Long: Return
         videos that are longer than 20 minutes. All: Do not filter by length.Specifying this value is
         the same as not specifying the videoLength parameter.
        :type length: str or ~video_search_client.models.VideoLength
        :param market: The market where the results come from. Typically, mkt is the country where the
         user is making the request from. However, it could be a different country if the user is not
         located in a country where Bing delivers results. The market must be in the form
         :code:`<language code>`-:code:`<country code>`. For example, en-US. The string is case
         insensitive. For a list of possible market values, see `Market Codes
         <https://docs.microsoft.com/en-us/bing/bing-video-search/overview>`_. NOTE: If known, you are
         encouraged to always specify the market. Specifying the market helps Bing route the request and
         return an appropriate and optimal response. If you specify a market that is not listed in
         `Market Codes <https://docs.microsoft.com/en-us/bing/bing-video-search/overview>`_\ , Bing uses
         a best fit market code based on an internal mapping that is subject to change. This parameter
         and the `cc <https://docs.microsoft.com/en-us/bing/bing-video-search/overview>`_ query
         parameter are mutually exclusiveâ€”do not specify both.
        :type market: str
        :param offset: The zero-based offset that indicates the number of videos to skip before
         returning videos. The default is 0. The offset should be less than (\ `totalEstimatedMatches
         <https://docs.microsoft.com/en-us/bing/bing-video-search/overview>`_ - count). Use this
         parameter along with the count parameter to page results. For example, if your user interface
         displays 20 videos per page, set count to 20 and offset to 0 to get the first page of results.
         For each subsequent page, increment offset by 20 (for example, 0, 20, 40). It is possible for
         multiple pages to include some overlap in results. To prevent duplicates, see `nextOffset
         <https://docs.microsoft.com/en-us/bing/bing-video-search/overview>`_. Use this parameter only
         with the Video Search API.
        :type offset: int
        :param pricing: Filter videos by the following pricing options: Free: Return videos that are
         free to view. Paid: Return videos that require a subscription or payment to view. All: Do not
         filter by pricing.Specifying this value is the same as not specifying the pricing parameter.
        :type pricing: str or ~video_search_client.models.VideoPricing
        :param resolution: Filter videos by the following resolutions: SD480p: Return videos with a
         480p or higher resolution. HD720p: Return videos with a 720p or higher resolution. HD1080p:
         Return videos with a 1080p or higher resolution. All: Do not filter by resolution.Specifying
         this value is the same as not specifying the resolution parameter.
        :type resolution: str or ~video_search_client.models.VideoResolution
        :param safe_search: Filter videos for adult content. The following are the possible filter
         values. Off: If the request is through the Video Search API, the response includes adult videos
         and the thumbnail images of the videos are clear (non-fuzzy). If the request is through the Web
         Search API, the response includes adult videos but the thumbnail images of the videos are
         pixelated (fuzzy). Moderate: If the request is through the Video Search API, the response does
         not include videos with adult content. If the request is through the Web Search API, the
         response may include videos with adult content but the thumbnail images of the videos are
         pixelated (fuzzy). Strict: Does not return videos with adult content. The default is Moderate.
         If the request comes from a market that Bing's adult policy requires that safeSearch is set to
         Strict, Bing ignores the safeSearch value and uses Strict. If you use the site: query operator,
         there is the chance that the response may contain adult content regardless of what the
         safeSearch query parameter is set to. Use site: only if you are aware of the content on the
         site and your scenario supports the possibility of adult content.
        :type safe_search: str or ~video_search_client.models.SafeSearch
        :param set_lang: The language to use for user interface strings. Specify the language using the
         ISO 639-1 2-letter language code. For example, the language code for English is EN. The default
         is EN (English). Although optional, you should always specify the language. Typically, you set
         setLang to the same language specified by mkt unless the user wants the user interface strings
         displayed in a different language. This parameter and the `Accept-Language
         <https://docs.microsoft.com/en-us/bing/bing-video-search/overview>`_ header are mutually
         exclusive; do not specify both. A user interface string is a string that's used as a label in a
         user interface. There are few user interface strings in the JSON response objects. Also, any
         links to Bing.com properties in the response objects apply the specified language.
        :type set_lang: str
        :param text_decorations: A Boolean value that determines whether display strings contain
         decoration markers such as hit highlighting characters. If true, the strings may include
         markers. The default is false. To specify whether to use Unicode characters or HTML tags as the
         markers, see the `textFormat <https://docs.microsoft.com/en-us/bing/bing-video-
         search/overview>`_ query parameter. For information about hit highlighting, see `Hit
         Highlighting <https://docs.microsoft.com/en-us/bing/bing-video-search/overview>`_.
        :type text_decorations: bool
        :param text_format: The type of markers to use for text decorations (see the textDecorations
         query parameter). Possible values are Rawâ€”Use Unicode characters to mark content that needs
         special formatting. The Unicode characters are in the range E000 through E019. For example,
         Bing uses E000 and E001 to mark the beginning and end of query terms for hit highlighting.
         HTMLâ€”Use HTML tags to mark content that needs special formatting. For example, use :code:`<b>`
         tags to highlight query terms in display strings. The default is Raw. For display strings that
         contain escapable HTML characters such as <, >, and &, if textFormat is set to HTML, Bing
         escapes the characters as appropriate (for example, < is escaped to &lt;).
        :type text_format: str or ~video_search_client.models.TextFormat
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Videos, or the result of cls(response)
        :rtype: ~video_search_client.models.Videos
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType["_models.Videos"]
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
        }
        error_map.update(kwargs.pop("error_map", {}))

        # Construct URL
        url = self.search.metadata["url"]  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if country_code is not None:
            query_parameters["cc"] = self._serialize.query(
                "country_code", country_code, "str"
            )
        if count is not None:
            query_parameters["count"] = self._serialize.query("count", count, "int")
        if freshness is not None:
            query_parameters["freshness"] = self._serialize.query(
                "freshness", freshness, "str"
            )
        if id is not None:
            query_parameters["id"] = self._serialize.query("id", id, "str")
        if length is not None:
            query_parameters["length"] = self._serialize.query("length", length, "str")
        if market is not None:
            query_parameters["mkt"] = self._serialize.query("market", market, "str")
        if offset is not None:
            query_parameters["offset"] = self._serialize.query("offset", offset, "int")
        if pricing is not None:
            query_parameters["pricing"] = self._serialize.query(
                "pricing", pricing, "str"
            )
        query_parameters["q"] = self._serialize.query("query", query, "str")
        if resolution is not None:
            query_parameters["resolution"] = self._serialize.query(
                "resolution", resolution, "str"
            )
        if safe_search is not None:
            query_parameters["safeSearch"] = self._serialize.query(
                "safe_search", safe_search, "str"
            )
        if set_lang is not None:
            query_parameters["setLang"] = self._serialize.query(
                "set_lang", set_lang, "str"
            )
        if text_decorations is not None:
            query_parameters["textDecorations"] = self._serialize.query(
                "text_decorations", text_decorations, "bool"
            )
        if text_format is not None:
            query_parameters["textFormat"] = self._serialize.query(
                "text_format", text_format, "str"
            )

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters["X-BingApis-SDK"] = self._serialize.header(
            "x_bing_apis_sdk", x_bing_apis_sdk, "str"
        )
        if accept is not None:
            header_parameters["Accept"] = self._serialize.header(
                "accept", accept, "str"
            )
        if accept_language is not None:
            header_parameters["Accept-Language"] = self._serialize.header(
                "accept_language", accept_language, "str"
            )
        if user_agent_parameter is not None:
            header_parameters["User-Agent"] = self._serialize.header(
                "user_agent_parameter", user_agent_parameter, "str"
            )
        if client_id is not None:
            header_parameters["X-MSEdge-ClientID"] = self._serialize.header(
                "client_id", client_id, "str"
            )
        if client_ip is not None:
            header_parameters["X-MSEdge-ClientIP"] = self._serialize.header(
                "client_ip", client_ip, "str"
            )
        if location is not None:
            header_parameters["X-Search-Location"] = self._serialize.header(
                "location", location, "str"
            )

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            error = self._deserialize(_models.ErrorResponse, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("Videos", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    search.metadata = {"url": "/videos/search"}  # type: ignore

    def details(
        self,
        query,  # type: str
        x_bing_apis_sdk=True,  # type: Union[str, "_models.XBingApisSDK"]
        accept=None,  # type: Optional[str]
        accept_language=None,  # type: Optional[str]
        user_agent_parameter=None,  # type: Optional[str]
        client_id=None,  # type: Optional[str]
        client_ip=None,  # type: Optional[str]
        location=None,  # type: Optional[str]
        country_code=None,  # type: Optional[str]
        id=None,  # type: Optional[str]
        modules=None,  # type: Optional[List[Union[str, "_models.VideoInsightModule"]]]
        market=None,  # type: Optional[str]
        resolution=None,  # type: Optional[Union[str, "_models.VideoResolution"]]
        safe_search=None,  # type: Optional[Union[str, "_models.SafeSearch"]]
        set_lang=None,  # type: Optional[str]
        text_decorations=None,  # type: Optional[bool]
        text_format=None,  # type: Optional[Union[str, "_models.TextFormat"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "_models.VideoDetails"
        """The Video Detail Search API lets you search on Bing and get back insights about a video, such as related videos. This section provides technical details about the query parameters and headers that you use to request insights of videos and the JSON response objects that contain them. For examples that show how to make requests, see `Searching the Web for Videos <https://docs.microsoft.com/en-us/bing/bing-video-search/overview>`_.

        The Video Detail Search API lets you search on Bing and get back insights about a video, such
        as related videos. This section provides technical details about the query parameters and
        headers that you use to request insights of videos and the JSON response objects that contain
        them. For examples that show how to make requests, see `Searching the Web for Videos
        <https://docs.microsoft.com/en-us/bing/bing-video-search/overview>`_.

        :param x_bing_apis_sdk: Activate swagger compliance.
        :type x_bing_apis_sdk: str or ~video_search_client.models.XBingApisSDK
        :param query: The user's search query string. The query string cannot be empty. The query
         string may contain `Bing Advanced Operators
         <http://msdn.microsoft.com/library/ff795620.aspx>`_. For example, to limit videos to a specific
         domain, use the `site: <http://msdn.microsoft.com/library/ff795613.aspx>`_ operator. Use this
         parameter only with the Video Search API. Do not specify this parameter when calling the
         Trending Videos API.
        :type query: str
        :param accept: The default media type is application/json. To specify that the response use
         `JSON-LD <http://json-ld.org/>`_\ , set the Accept header to application/ld+json.
        :type accept: str
        :param accept_language: A comma-delimited list of one or more languages to use for user
         interface strings. The list is in decreasing order of preference. For additional information,
         including expected format, see `RFC2616
         <http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html>`_. This header and the `setLang
         <https://docs.microsoft.com/en-us/bing/bing-video-search/overview>`_ query parameter are
         mutually exclusive; do not specify both. If you set this header, you must also specify the `cc
         <https://docs.microsoft.com/en-us/bing/bing-video-search/overview>`_ query parameter. To
         determine the market to return results for, Bing uses the first supported language it finds
         from the list and combines it with the cc parameter value. If the list does not include a
         supported language, Bing finds the closest language and market that supports the request or it
         uses an aggregated or default market for the results. To determine the market that Bing used,
         see the BingAPIs-Market header. Use this header and the cc query parameter only if you specify
         multiple languages. Otherwise, use the `mkt <https://docs.microsoft.com/en-us/bing/bing-video-
         search/overview>`_ and `setLang <https://docs.microsoft.com/en-us/bing/bing-video-
         search/overview>`_ query parameters. A user interface string is a string that's used as a label
         in a user interface. There are few user interface strings in the JSON response objects. Any
         links to Bing.com properties in the response objects apply the specified language.
        :type accept_language: str
        :param user_agent_parameter: The user agent originating the request. Bing uses the user agent
         to provide mobile users with an optimized experience. Although optional, you are encouraged to
         always specify this header. The user-agent should be the same string that any commonly used
         browser sends. For information about user agents, see `RFC 2616
         <http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html>`_. The following are examples of user-
         agent strings. Windows Phone: Mozilla/5.0 (compatible; MSIE 10.0; Windows Phone 8.0;
         Trident/6.0; IEMobile/10.0; ARM; Touch; NOKIA; Lumia 822). Android: Mozilla / 5.0 (Linux; U;
         Android 2.3.5; en - us; SCH - I500 Build / GINGERBREAD) AppleWebKit / 533.1 (KHTML; like Gecko)
         Version / 4.0 Mobile Safari / 533.1. iPhone: Mozilla / 5.0 (iPhone; CPU iPhone OS 6_1 like Mac
         OS X) AppleWebKit / 536.26 (KHTML; like Gecko) Mobile / 10B142 iPhone4; 1 BingWeb /
         3.03.1428.20120423. PC: Mozilla / 5.0 (Windows NT 6.3; WOW64; Trident / 7.0; Touch; rv:11.0)
         like Gecko. iPad: Mozilla / 5.0 (iPad; CPU OS 7_0 like Mac OS X) AppleWebKit / 537.51.1 (KHTML,
         like Gecko) Version / 7.0 Mobile / 11A465 Safari / 9537.53.
        :type user_agent_parameter: str
        :param client_id: Bing uses this header to provide users with consistent behavior across Bing
         API calls. Bing often flights new features and improvements, and it uses the client ID as a key
         for assigning traffic on different flights. If you do not use the same client ID for a user
         across multiple requests, then Bing may assign the user to multiple conflicting flights. Being
         assigned to multiple conflicting flights can lead to an inconsistent user experience. For
         example, if the second request has a different flight assignment than the first, the experience
         may be unexpected. Also, Bing can use the client ID to tailor web results to that client IDâ€™s
         search history, providing a richer experience for the user. Bing also uses this header to help
         improve result rankings by analyzing the activity generated by a client ID. The relevance
         improvements help with better quality of results delivered by Bing APIs and in turn enables
         higher click-through rates for the API consumer. IMPORTANT: Although optional, you should
         consider this header required. Persisting the client ID across multiple requests for the same
         end user and device combination enables 1) the API consumer to receive a consistent user
         experience, and 2) higher click-through rates via better quality of results from the Bing APIs.
         Each user that uses your application on the device must have a unique, Bing generated client
         ID. If you do not include this header in the request, Bing generates an ID and returns it in
         the X-MSEdge-ClientID response header. The only time that you should NOT include this header in
         a request is the first time the user uses your app on that device. Use the client ID for each
         Bing API request that your app makes for this user on the device. Persist the client ID. To
         persist the ID in a browser app, use a persistent HTTP cookie to ensure the ID is used across
         all sessions. Do not use a session cookie. For other apps such as mobile apps, use the device's
         persistent storage to persist the ID. The next time the user uses your app on that device, get
         the client ID that you persisted. Bing responses may or may not include this header. If the
         response includes this header, capture the client ID and use it for all subsequent Bing
         requests for the user on that device. If you include the X-MSEdge-ClientID, you must not
         include cookies in the request.
        :type client_id: str
        :param client_ip: The IPv4 or IPv6 address of the client device. The IP address is used to
         discover the user's location. Bing uses the location information to determine safe search
         behavior. Although optional, you are encouraged to always specify this header and the X-Search-
         Location header. Do not obfuscate the address (for example, by changing the last octet to 0).
         Obfuscating the address results in the location not being anywhere near the device's actual
         location, which may result in Bing serving erroneous results.
        :type client_ip: str
        :param location: A semicolon-delimited list of key/value pairs that describe the client's
         geographical location. Bing uses the location information to determine safe search behavior and
         to return relevant local content. Specify the key/value pair as :code:`<key>`::code:`<value>`.
         The following are the keys that you use to specify the user's location. lat (required): The
         latitude of the client's location, in degrees. The latitude must be greater than or equal to
         -90.0 and less than or equal to +90.0. Negative values indicate southern latitudes and positive
         values indicate northern latitudes. long (required): The longitude of the client's location, in
         degrees. The longitude must be greater than or equal to -180.0 and less than or equal to
         +180.0. Negative values indicate western longitudes and positive values indicate eastern
         longitudes. re (required): The radius, in meters, which specifies the horizontal accuracy of
         the coordinates. Pass the value returned by the device's location service. Typical values might
         be 22m for GPS/Wi-Fi, 380m for cell tower triangulation, and 18,000m for reverse IP lookup. ts
         (optional): The UTC UNIX timestamp of when the client was at the location. (The UNIX timestamp
         is the number of seconds since January 1, 1970.) head (optional): The client's relative heading
         or direction of travel. Specify the direction of travel as degrees from 0 through 360, counting
         clockwise relative to true north. Specify this key only if the sp key is nonzero. sp
         (optional): The horizontal velocity (speed), in meters per second, that the client device is
         traveling. alt (optional): The altitude of the client device, in meters. are (optional): The
         radius, in meters, that specifies the vertical accuracy of the coordinates. Specify this key
         only if you specify the alt key. Although many of the keys are optional, the more information
         that you provide, the more accurate the location results are. Although optional, you are
         encouraged to always specify the user's geographical location. Providing the location is
         especially important if the client's IP address does not accurately reflect the user's physical
         location (for example, if the client uses VPN). For optimal results, you should include this
         header and the X-MSEdge-ClientIP header, but at a minimum, you should include this header.
        :type location: str
        :param country_code: A 2-character country code of the country where the results come from.
         This API supports only the United States market. If you specify this query parameter, it must
         be set to us. If you set this parameter, you must also specify the Accept-Language header. Bing
         uses the first supported language it finds from the languages list, and combine that language
         with the country code that you specify to determine the market to return results for. If the
         languages list does not include a supported language, Bing finds the closest language and
         market that supports the request, or it may use an aggregated or default market for the results
         instead of a specified one. You should use this query parameter and the Accept-Language query
         parameter only if you specify multiple languages; otherwise, you should use the mkt and setLang
         query parameters. This parameter and the mkt query parameter are mutually exclusiveâ€”do not
         specify both.
        :type country_code: str
        :param id: An ID that uniquely identifies a video. The `Video <https://docs.microsoft.com/en-
         us/bing/bing-video-search/overview>`_ object's videoId field contains the ID that you set this
         parameter to. You use this parameter to identify the video to get insights of.
        :type id: str
        :param modules: A comma-delimited list of insights to request. The following are the possible
         case-insensitive values. All: Return all available insights. RelatedVideos: Return a list of
         videos that are similar to the video specified by the id query parameter. VideoResult: Return
         the video that you're requesting insights of (this is the video that you set the id query
         parameter to in your insights request). If you specify an insight and there is no data for it,
         the response object does not include the related field. For example, if you specify
         RelatedVideos and none exist, the response does not include the relatedVideos field. Although
         the user's query term is not required, you should always include it because it helps to improve
         relevance and the results.
        :type modules: list[str or ~video_search_client.models.VideoInsightModule]
        :param market: The market where the results come from. Typically, mkt is the country where the
         user is making the request from. However, it could be a different country if the user is not
         located in a country where Bing delivers results. The market must be in the form
         :code:`<language code>`-:code:`<country code>`. For example, en-US. The string is case
         insensitive. For a list of possible market values, see `Market Codes
         <https://docs.microsoft.com/en-us/bing/bing-video-search/overview>`_. NOTE: If known, you are
         encouraged to always specify the market. Specifying the market helps Bing route the request and
         return an appropriate and optimal response. If you specify a market that is not listed in
         `Market Codes <https://docs.microsoft.com/en-us/bing/bing-video-search/overview>`_\ , Bing uses
         a best fit market code based on an internal mapping that is subject to change. This parameter
         and the `cc <https://docs.microsoft.com/en-us/bing/bing-video-search/overview>`_ query
         parameter are mutually exclusiveâ€”do not specify both.
        :type market: str
        :param resolution: Filter videos by the following resolutions: SD480p: Return videos with a
         480p or higher resolution. HD720p: Return videos with a 720p or higher resolution. HD1080p:
         Return videos with a 1080p or higher resolution. All: Do not filter by resolution.Specifying
         this value is the same as not specifying the resolution parameter.
        :type resolution: str or ~video_search_client.models.VideoResolution
        :param safe_search: Filter videos for adult content. The following are the possible filter
         values. Off: If the request is through the Video Search API, the response includes adult videos
         and the thumbnail images of the videos are clear (non-fuzzy). If the request is through the Web
         Search API, the response includes adult videos but the thumbnail images of the videos are
         pixelated (fuzzy). Moderate: If the request is through the Video Search API, the response does
         not include videos with adult content. If the request is through the Web Search API, the
         response may include videos with adult content but the thumbnail images of the videos are
         pixelated (fuzzy). Strict: Does not return videos with adult content. The default is Moderate.
         If the request comes from a market that Bing's adult policy requires that safeSearch is set to
         Strict, Bing ignores the safeSearch value and uses Strict. If you use the site: query operator,
         there is the chance that the response may contain adult content regardless of what the
         safeSearch query parameter is set to. Use site: only if you are aware of the content on the
         site and your scenario supports the possibility of adult content.
        :type safe_search: str or ~video_search_client.models.SafeSearch
        :param set_lang: The language to use for user interface strings. Specify the language using the
         ISO 639-1 2-letter language code. For example, the language code for English is EN. The default
         is EN (English). Although optional, you should always specify the language. Typically, you set
         setLang to the same language specified by mkt unless the user wants the user interface strings
         displayed in a different language. This parameter and the `Accept-Language
         <https://docs.microsoft.com/en-us/bing/bing-video-search/overview>`_ header are mutually
         exclusive; do not specify both. A user interface string is a string that's used as a label in a
         user interface. There are few user interface strings in the JSON response objects. Also, any
         links to Bing.com properties in the response objects apply the specified language.
        :type set_lang: str
        :param text_decorations: A Boolean value that determines whether display strings contain
         decoration markers such as hit highlighting characters. If true, the strings may include
         markers. The default is false. To specify whether to use Unicode characters or HTML tags as the
         markers, see the `textFormat <https://docs.microsoft.com/en-us/bing/bing-video-
         search/overview>`_ query parameter. For information about hit highlighting, see `Hit
         Highlighting <https://docs.microsoft.com/en-us/bing/bing-video-search/overview>`_.
        :type text_decorations: bool
        :param text_format: The type of markers to use for text decorations (see the textDecorations
         query parameter). Possible values are Rawâ€”Use Unicode characters to mark content that needs
         special formatting. The Unicode characters are in the range E000 through E019. For example,
         Bing uses E000 and E001 to mark the beginning and end of query terms for hit highlighting.
         HTMLâ€”Use HTML tags to mark content that needs special formatting. For example, use :code:`<b>`
         tags to highlight query terms in display strings. The default is Raw. For display strings that
         contain escapable HTML characters such as <, >, and &, if textFormat is set to HTML, Bing
         escapes the characters as appropriate (for example, < is escaped to &lt;).
        :type text_format: str or ~video_search_client.models.TextFormat
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: VideoDetails, or the result of cls(response)
        :rtype: ~video_search_client.models.VideoDetails
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType["_models.VideoDetails"]
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
        }
        error_map.update(kwargs.pop("error_map", {}))

        # Construct URL
        url = self.details.metadata["url"]  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if country_code is not None:
            query_parameters["cc"] = self._serialize.query(
                "country_code", country_code, "str"
            )
        if id is not None:
            query_parameters["id"] = self._serialize.query("id", id, "str")
        if modules is not None:
            query_parameters["modules"] = self._serialize.query(
                "modules", modules, "[str]", div=","
            )
        if market is not None:
            query_parameters["mkt"] = self._serialize.query("market", market, "str")
        query_parameters["q"] = self._serialize.query("query", query, "str")
        if resolution is not None:
            query_parameters["resolution"] = self._serialize.query(
                "resolution", resolution, "str"
            )
        if safe_search is not None:
            query_parameters["safeSearch"] = self._serialize.query(
                "safe_search", safe_search, "str"
            )
        if set_lang is not None:
            query_parameters["setLang"] = self._serialize.query(
                "set_lang", set_lang, "str"
            )
        if text_decorations is not None:
            query_parameters["textDecorations"] = self._serialize.query(
                "text_decorations", text_decorations, "bool"
            )
        if text_format is not None:
            query_parameters["textFormat"] = self._serialize.query(
                "text_format", text_format, "str"
            )

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters["X-BingApis-SDK"] = self._serialize.header(
            "x_bing_apis_sdk", x_bing_apis_sdk, "str"
        )
        if accept is not None:
            header_parameters["Accept"] = self._serialize.header(
                "accept", accept, "str"
            )
        if accept_language is not None:
            header_parameters["Accept-Language"] = self._serialize.header(
                "accept_language", accept_language, "str"
            )
        if user_agent_parameter is not None:
            header_parameters["User-Agent"] = self._serialize.header(
                "user_agent_parameter", user_agent_parameter, "str"
            )
        if client_id is not None:
            header_parameters["X-MSEdge-ClientID"] = self._serialize.header(
                "client_id", client_id, "str"
            )
        if client_ip is not None:
            header_parameters["X-MSEdge-ClientIP"] = self._serialize.header(
                "client_ip", client_ip, "str"
            )
        if location is not None:
            header_parameters["X-Search-Location"] = self._serialize.header(
                "location", location, "str"
            )

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            error = self._deserialize(_models.ErrorResponse, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("VideoDetails", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    details.metadata = {"url": "/videos/details"}  # type: ignore

    def trending(
        self,
        x_bing_apis_sdk=True,  # type: Union[str, "_models.XBingApisSDK"]
        accept=None,  # type: Optional[str]
        accept_language=None,  # type: Optional[str]
        user_agent_parameter=None,  # type: Optional[str]
        client_id=None,  # type: Optional[str]
        client_ip=None,  # type: Optional[str]
        location=None,  # type: Optional[str]
        country_code=None,  # type: Optional[str]
        market=None,  # type: Optional[str]
        safe_search=None,  # type: Optional[Union[str, "_models.SafeSearch"]]
        set_lang=None,  # type: Optional[str]
        text_decorations=None,  # type: Optional[bool]
        text_format=None,  # type: Optional[Union[str, "_models.TextFormat"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "_models.TrendingVideos"
        """The Video Trending Search API lets you search on Bing and get back a list of videos that are trending based on search requests made by others. The videos are broken out into different categories. For example, Top Music Videos. For a list of markets that support trending videos, see `Trending Videos <https://docs.microsoft.com/en-us/bing/bing-video-search/overview>`_.

        The Video Trending Search API lets you search on Bing and get back a list of videos that are
        trending based on search requests made by others. The videos are broken out into different
        categories. For example, Top Music Videos. For a list of markets that support trending videos,
        see `Trending Videos <https://docs.microsoft.com/en-us/bing/bing-video-search/overview>`_.

        :param x_bing_apis_sdk: Activate swagger compliance.
        :type x_bing_apis_sdk: str or ~video_search_client.models.XBingApisSDK
        :param accept: The default media type is application/json. To specify that the response use
         `JSON-LD <http://json-ld.org/>`_\ , set the Accept header to application/ld+json.
        :type accept: str
        :param accept_language: A comma-delimited list of one or more languages to use for user
         interface strings. The list is in decreasing order of preference. For additional information,
         including expected format, see `RFC2616
         <http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html>`_. This header and the `setLang
         <https://docs.microsoft.com/en-us/bing/bing-video-search/overview>`_ query parameter are
         mutually exclusive; do not specify both. If you set this header, you must also specify the `cc
         <https://docs.microsoft.com/en-us/bing/bing-video-search/overview>`_ query parameter. To
         determine the market to return results for, Bing uses the first supported language it finds
         from the list and combines it with the cc parameter value. If the list does not include a
         supported language, Bing finds the closest language and market that supports the request or it
         uses an aggregated or default market for the results. To determine the market that Bing used,
         see the BingAPIs-Market header. Use this header and the cc query parameter only if you specify
         multiple languages. Otherwise, use the `mkt <https://docs.microsoft.com/en-us/bing/bing-video-
         search/overview>`_ and `setLang <https://docs.microsoft.com/en-us/bing/bing-video-
         search/overview>`_ query parameters. A user interface string is a string that's used as a label
         in a user interface. There are few user interface strings in the JSON response objects. Any
         links to Bing.com properties in the response objects apply the specified language.
        :type accept_language: str
        :param user_agent_parameter: The user agent originating the request. Bing uses the user agent
         to provide mobile users with an optimized experience. Although optional, you are encouraged to
         always specify this header. The user-agent should be the same string that any commonly used
         browser sends. For information about user agents, see `RFC 2616
         <http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html>`_. The following are examples of user-
         agent strings. Windows Phone: Mozilla/5.0 (compatible; MSIE 10.0; Windows Phone 8.0;
         Trident/6.0; IEMobile/10.0; ARM; Touch; NOKIA; Lumia 822). Android: Mozilla / 5.0 (Linux; U;
         Android 2.3.5; en - us; SCH - I500 Build / GINGERBREAD) AppleWebKit / 533.1 (KHTML; like Gecko)
         Version / 4.0 Mobile Safari / 533.1. iPhone: Mozilla / 5.0 (iPhone; CPU iPhone OS 6_1 like Mac
         OS X) AppleWebKit / 536.26 (KHTML; like Gecko) Mobile / 10B142 iPhone4; 1 BingWeb /
         3.03.1428.20120423. PC: Mozilla / 5.0 (Windows NT 6.3; WOW64; Trident / 7.0; Touch; rv:11.0)
         like Gecko. iPad: Mozilla / 5.0 (iPad; CPU OS 7_0 like Mac OS X) AppleWebKit / 537.51.1 (KHTML,
         like Gecko) Version / 7.0 Mobile / 11A465 Safari / 9537.53.
        :type user_agent_parameter: str
        :param client_id: Bing uses this header to provide users with consistent behavior across Bing
         API calls. Bing often flights new features and improvements, and it uses the client ID as a key
         for assigning traffic on different flights. If you do not use the same client ID for a user
         across multiple requests, then Bing may assign the user to multiple conflicting flights. Being
         assigned to multiple conflicting flights can lead to an inconsistent user experience. For
         example, if the second request has a different flight assignment than the first, the experience
         may be unexpected. Also, Bing can use the client ID to tailor web results to that client IDâ€™s
         search history, providing a richer experience for the user. Bing also uses this header to help
         improve result rankings by analyzing the activity generated by a client ID. The relevance
         improvements help with better quality of results delivered by Bing APIs and in turn enables
         higher click-through rates for the API consumer. IMPORTANT: Although optional, you should
         consider this header required. Persisting the client ID across multiple requests for the same
         end user and device combination enables 1) the API consumer to receive a consistent user
         experience, and 2) higher click-through rates via better quality of results from the Bing APIs.
         Each user that uses your application on the device must have a unique, Bing generated client
         ID. If you do not include this header in the request, Bing generates an ID and returns it in
         the X-MSEdge-ClientID response header. The only time that you should NOT include this header in
         a request is the first time the user uses your app on that device. Use the client ID for each
         Bing API request that your app makes for this user on the device. Persist the client ID. To
         persist the ID in a browser app, use a persistent HTTP cookie to ensure the ID is used across
         all sessions. Do not use a session cookie. For other apps such as mobile apps, use the device's
         persistent storage to persist the ID. The next time the user uses your app on that device, get
         the client ID that you persisted. Bing responses may or may not include this header. If the
         response includes this header, capture the client ID and use it for all subsequent Bing
         requests for the user on that device. If you include the X-MSEdge-ClientID, you must not
         include cookies in the request.
        :type client_id: str
        :param client_ip: The IPv4 or IPv6 address of the client device. The IP address is used to
         discover the user's location. Bing uses the location information to determine safe search
         behavior. Although optional, you are encouraged to always specify this header and the X-Search-
         Location header. Do not obfuscate the address (for example, by changing the last octet to 0).
         Obfuscating the address results in the location not being anywhere near the device's actual
         location, which may result in Bing serving erroneous results.
        :type client_ip: str
        :param location: A semicolon-delimited list of key/value pairs that describe the client's
         geographical location. Bing uses the location information to determine safe search behavior and
         to return relevant local content. Specify the key/value pair as :code:`<key>`::code:`<value>`.
         The following are the keys that you use to specify the user's location. lat (required): The
         latitude of the client's location, in degrees. The latitude must be greater than or equal to
         -90.0 and less than or equal to +90.0. Negative values indicate southern latitudes and positive
         values indicate northern latitudes. long (required): The longitude of the client's location, in
         degrees. The longitude must be greater than or equal to -180.0 and less than or equal to
         +180.0. Negative values indicate western longitudes and positive values indicate eastern
         longitudes. re (required): The radius, in meters, which specifies the horizontal accuracy of
         the coordinates. Pass the value returned by the device's location service. Typical values might
         be 22m for GPS/Wi-Fi, 380m for cell tower triangulation, and 18,000m for reverse IP lookup. ts
         (optional): The UTC UNIX timestamp of when the client was at the location. (The UNIX timestamp
         is the number of seconds since January 1, 1970.) head (optional): The client's relative heading
         or direction of travel. Specify the direction of travel as degrees from 0 through 360, counting
         clockwise relative to true north. Specify this key only if the sp key is nonzero. sp
         (optional): The horizontal velocity (speed), in meters per second, that the client device is
         traveling. alt (optional): The altitude of the client device, in meters. are (optional): The
         radius, in meters, that specifies the vertical accuracy of the coordinates. Specify this key
         only if you specify the alt key. Although many of the keys are optional, the more information
         that you provide, the more accurate the location results are. Although optional, you are
         encouraged to always specify the user's geographical location. Providing the location is
         especially important if the client's IP address does not accurately reflect the user's physical
         location (for example, if the client uses VPN). For optimal results, you should include this
         header and the X-MSEdge-ClientIP header, but at a minimum, you should include this header.
        :type location: str
        :param country_code: A 2-character country code of the country where the results come from.
         This API supports only the United States market. If you specify this query parameter, it must
         be set to us. If you set this parameter, you must also specify the Accept-Language header. Bing
         uses the first supported language it finds from the languages list, and combine that language
         with the country code that you specify to determine the market to return results for. If the
         languages list does not include a supported language, Bing finds the closest language and
         market that supports the request, or it may use an aggregated or default market for the results
         instead of a specified one. You should use this query parameter and the Accept-Language query
         parameter only if you specify multiple languages; otherwise, you should use the mkt and setLang
         query parameters. This parameter and the mkt query parameter are mutually exclusiveâ€”do not
         specify both.
        :type country_code: str
        :param market: The market where the results come from. Typically, mkt is the country where the
         user is making the request from. However, it could be a different country if the user is not
         located in a country where Bing delivers results. The market must be in the form
         :code:`<language code>`-:code:`<country code>`. For example, en-US. The string is case
         insensitive. For a list of possible market values, see `Market Codes
         <https://docs.microsoft.com/en-us/bing/bing-video-search/overview>`_. NOTE: If known, you are
         encouraged to always specify the market. Specifying the market helps Bing route the request and
         return an appropriate and optimal response. If you specify a market that is not listed in
         `Market Codes <https://docs.microsoft.com/en-us/bing/bing-video-search/overview>`_\ , Bing uses
         a best fit market code based on an internal mapping that is subject to change. This parameter
         and the `cc <https://docs.microsoft.com/en-us/bing/bing-video-search/overview>`_ query
         parameter are mutually exclusiveâ€”do not specify both.
        :type market: str
        :param safe_search: Filter videos for adult content. The following are the possible filter
         values. Off: If the request is through the Video Search API, the response includes adult videos
         and the thumbnail images of the videos are clear (non-fuzzy). If the request is through the Web
         Search API, the response includes adult videos but the thumbnail images of the videos are
         pixelated (fuzzy). Moderate: If the request is through the Video Search API, the response does
         not include videos with adult content. If the request is through the Web Search API, the
         response may include videos with adult content but the thumbnail images of the videos are
         pixelated (fuzzy). Strict: Does not return videos with adult content. The default is Moderate.
         If the request comes from a market that Bing's adult policy requires that safeSearch is set to
         Strict, Bing ignores the safeSearch value and uses Strict. If you use the site: query operator,
         there is the chance that the response may contain adult content regardless of what the
         safeSearch query parameter is set to. Use site: only if you are aware of the content on the
         site and your scenario supports the possibility of adult content.
        :type safe_search: str or ~video_search_client.models.SafeSearch
        :param set_lang: The language to use for user interface strings. Specify the language using the
         ISO 639-1 2-letter language code. For example, the language code for English is EN. The default
         is EN (English). Although optional, you should always specify the language. Typically, you set
         setLang to the same language specified by mkt unless the user wants the user interface strings
         displayed in a different language. This parameter and the `Accept-Language
         <https://docs.microsoft.com/en-us/bing/bing-video-search/overview>`_ header are mutually
         exclusive; do not specify both. A user interface string is a string that's used as a label in a
         user interface. There are few user interface strings in the JSON response objects. Also, any
         links to Bing.com properties in the response objects apply the specified language.
        :type set_lang: str
        :param text_decorations: A Boolean value that determines whether display strings contain
         decoration markers such as hit highlighting characters. If true, the strings may include
         markers. The default is false. To specify whether to use Unicode characters or HTML tags as the
         markers, see the `textFormat <https://docs.microsoft.com/en-us/bing/bing-video-
         search/overview>`_ query parameter. For information about hit highlighting, see `Hit
         Highlighting <https://docs.microsoft.com/en-us/bing/bing-video-search/overview>`_.
        :type text_decorations: bool
        :param text_format: The type of markers to use for text decorations (see the textDecorations
         query parameter). Possible values are Rawâ€”Use Unicode characters to mark content that needs
         special formatting. The Unicode characters are in the range E000 through E019. For example,
         Bing uses E000 and E001 to mark the beginning and end of query terms for hit highlighting.
         HTMLâ€”Use HTML tags to mark content that needs special formatting. For example, use :code:`<b>`
         tags to highlight query terms in display strings. The default is Raw. For display strings that
         contain escapable HTML characters such as <, >, and &, if textFormat is set to HTML, Bing
         escapes the characters as appropriate (for example, < is escaped to &lt;).
        :type text_format: str or ~video_search_client.models.TextFormat
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: TrendingVideos, or the result of cls(response)
        :rtype: ~video_search_client.models.TrendingVideos
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType["_models.TrendingVideos"]
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
        }
        error_map.update(kwargs.pop("error_map", {}))

        # Construct URL
        url = self.trending.metadata["url"]  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if country_code is not None:
            query_parameters["cc"] = self._serialize.query(
                "country_code", country_code, "str"
            )
        if market is not None:
            query_parameters["mkt"] = self._serialize.query("market", market, "str")
        if safe_search is not None:
            query_parameters["safeSearch"] = self._serialize.query(
                "safe_search", safe_search, "str"
            )
        if set_lang is not None:
            query_parameters["setLang"] = self._serialize.query(
                "set_lang", set_lang, "str"
            )
        if text_decorations is not None:
            query_parameters["textDecorations"] = self._serialize.query(
                "text_decorations", text_decorations, "bool"
            )
        if text_format is not None:
            query_parameters["textFormat"] = self._serialize.query(
                "text_format", text_format, "str"
            )

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters["X-BingApis-SDK"] = self._serialize.header(
            "x_bing_apis_sdk", x_bing_apis_sdk, "str"
        )
        if accept is not None:
            header_parameters["Accept"] = self._serialize.header(
                "accept", accept, "str"
            )
        if accept_language is not None:
            header_parameters["Accept-Language"] = self._serialize.header(
                "accept_language", accept_language, "str"
            )
        if user_agent_parameter is not None:
            header_parameters["User-Agent"] = self._serialize.header(
                "user_agent_parameter", user_agent_parameter, "str"
            )
        if client_id is not None:
            header_parameters["X-MSEdge-ClientID"] = self._serialize.header(
                "client_id", client_id, "str"
            )
        if client_ip is not None:
            header_parameters["X-MSEdge-ClientIP"] = self._serialize.header(
                "client_ip", client_ip, "str"
            )
        if location is not None:
            header_parameters["X-Search-Location"] = self._serialize.header(
                "location", location, "str"
            )

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            error = self._deserialize(_models.ErrorResponse, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("TrendingVideos", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    trending.metadata = {"url": "/videos/trending"}  # type: ignore
